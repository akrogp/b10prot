[{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"GNU GENERAL PUBLIC LICENSE","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU GENERAL PUBLIC LICENSE","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU GENERAL PUBLIC LICENSE","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU GENERAL PUBLIC LICENSE","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU GENERAL PUBLIC LICENSE","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU GENERAL PUBLIC LICENSE","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU GENERAL PUBLIC LICENSE","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU GENERAL PUBLIC LICENSE","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU GENERAL PUBLIC LICENSE","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU GENERAL PUBLIC LICENSE","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU GENERAL PUBLIC LICENSE","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU GENERAL PUBLIC LICENSE","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU GENERAL PUBLIC LICENSE","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU GENERAL PUBLIC LICENSE","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://akrogp.github.io/b10prot/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU GENERAL PUBLIC LICENSE","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"b10prot","text":"vignette shows build different proteomics identification workflows using b10prot package.","code":"library(conflicted) library(dplyr) library(tidyr) library(stringr) library(b10prot)  conflicts_prefer(dplyr::filter)"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"loading-psms","dir":"Articles","previous_headings":"","what":"Loading PSMs","title":"b10prot","text":"initial input identification workflows presented consists list Peptide--Spectrum Matches (PSMs) must previously generated using search engine. list PSMs must available data.frame containing least following columns: psmScore rank isDecoy peptideRef proteinRef geneRef (optional) provide iwf_load_psms function facilitate obtaining PSMs one mzIdentML (*.mzid) files, standardized file format HUPO Proteomics Standards Initiative. parse mzid files, rely mzR package. example dataset, use three mzid files obtained searching three fractions one tissue draft map human proteome. search, used MS-GF+ Search Engine within SearchGUI.","code":"psms <-    # Load PSMs from mzIdentML files   iwf_load_psms(     path = paste0(DATA_PATH, \"msgf\"),     # We will use MS-GF+ spectral E-value for the target-decoy approach     psm_score = \"MS.GF.SpecEValue\") %>%   # Extract UniProt accession for convenience (optional)   mutate(proteinRef = str_split_i(DatabaseAccess, \"\\\\|\", 2)) %>%   # Decoy information was not specified in my mzid files   mutate(isDecoy = str_detect(proteinRef, \"_REVERSED\")) %>%   # Extract UniProt gene name (only if you are interested in this level)   mutate(geneRef = str_extract(DatabaseDescription, \"GN=\\\\S+\")) %>%   mutate(geneRef = str_sub(geneRef, 4)) %>%    mutate(geneRef = ifelse(isDecoy, paste0(geneRef, \"_REVERSED\"), geneRef)) %>%    # Only best PSM per spectrum   filter(rank == 1) psms %>% glimpse() #> Rows: 49,708 #> Columns: 29 #> $ spectrumID               <chr> \"index=9901\", \"index=12199\", \"index=13496\", \"… #> $ chargeState              <int> 3, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, … #> $ rank                     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ passThreshold            <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU… #> $ experimentalMassToCharge <dbl> 1063.8254, 1141.6216, 994.1609, 1161.4554, 11… #> $ calculatedMassToCharge   <dbl> 1063.8251, 1141.6218, 994.1621, 1161.4556, 11… #> $ sequence                 <chr> \"EPVSVGTPSEGEGLGADGQEHKEDTFDVFR\", \"GVVGPGPAAL… #> $ peptideRef               <chr> \"Pep_EPVSVGTPSEGEGLGADGQEHKEDTFDVFR\", \"Pep_GV… #> $ modNum                   <int> 0, 0, 1, 6, 1, 0, 0, 0, 3, 1, 1, 0, 0, 0, 1, … #> $ isDecoy                  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ post                     <chr> \"Q\", \"G\", \"G\", \"G\", \"S\", \"S\", \"Q\", \"L\", \"E\", … #> $ pre                      <chr> \"R\", \"R\", \"K\", \"K\", \"R\", \"R\", \"K\", \"K\", \"K\", … #> $ start                    <int> 1039, 8, 314, 38, 326, 326, 278, 63, 757, 293… #> $ end                      <int> 1068, 36, 342, 64, 350, 350, 303, 91, 785, 31… #> $ DatabaseAccess           <chr> \"sp|Q8IX01|SUGP2_HUMAN\", \"sp|P22059|OSBP1_HUM… #> $ DBseqLength              <int> 1082, 807, 561, 478, 353, 353, 589, 142, 851,… #> $ DatabaseSeq              <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"… #> $ DatabaseDescription      <chr> \"sp|Q8IX01|SUGP2_HUMAN SURP and G-patch domai… #> $ spectrum.title           <chr> \"Adult_Testis_bRP_Elite_68_f01.12299.12299.3\"… #> $ scan.number.s.           <dbl> 12299, 14751, 16134, 11137, 7177, 8471, 9644,… #> $ scan.start.time          <chr> \"3695.0874\", \"4370.828\", \"4756.3667\", \"3381.8… #> $ acquisitionNum           <dbl> 9901, 12199, 13496, 8811, 5099, 6312, 7412, 1… #> $ MS.GF.RawScore           <dbl> 326, 292, 282, 256, 319, 296, 217, 228, 222, … #> $ MS.GF.DeNovoScore        <dbl> 331, 297, 288, 261, 319, 296, 219, 232, 232, … #> $ MS.GF.SpecEValue         <dbl> 1.098553e-35, 3.951045e-35, 4.986274e-35, 2.2… #> $ MS.GF.EValue             <dbl> 2.428852e-28, 8.729901e-28, 1.101726e-27, 5.0… #> $ psmScore                 <dbl> 1.098553e-35, 3.951045e-35, 4.986274e-35, 2.2… #> $ proteinRef               <chr> \"Q8IX01\", \"P22059\", \"P49902\", \"P04004\", \"P226… #> $ geneRef                  <chr> \"SUGP2\", \"OSBP\", \"NT5C2\", \"VTN\", \"HNRNPA2B1\",…"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"peptide-identifications","dir":"Articles","previous_headings":"","what":"Peptide identifications","title":"b10prot","text":"list PSMs, obtain list peptides selecting best PSM peptide, calculate peptide confidence scores using target-decoy approach: interested peptides, can obtain identified peptides setting peptide-level FDR threshold:","code":"peptides <-    psms %>%   # Best PSM per peptide   iwf_psm2pep(lower_better = TRUE) %>%    # Calculate target-decoy approach metrics   target_decoy_approach(pepScore)  peptides %>% glimpse() #> Rows: 27,498 #> Columns: 9 #> $ peptideRef <chr> \"Pep_EPVSVGTPSEGEGLGADGQEHKEDTFDVFR\", \"Pep_GVVGPGPAALAALGGG… #> $ pepScore   <dbl> 1.098553e-35, 1.358987e-35, 4.986274e-35, 2.282557e-34, 2.5… #> $ isDecoy    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ decoys     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ targets    <int> 1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, … #> $ pval       <dbl> 6.423433e-05, 6.423433e-05, 6.423433e-05, 6.423433e-05, 6.4… #> $ LP         <dbl> 4.192233, 4.192233, 4.192233, 4.192233, 4.192233, 4.192233,… #> $ FDR        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ qval       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… peptides %>%      filter(qval <= 0.01) %>%      global_fdr() #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1  11626   116            0.998"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"protein-identifications","dir":"Articles","previous_headings":"","what":"Protein identifications","title":"b10prot","text":"obtain list protein identifications, compute protein-level score using scores corresponding peptides apply protein-level FDR. use LPGF protein-level score using unique peptides, .e., peptides shared different proteins. First, need data.frame peptide--protein relations, including peptide-level scores previous section. obtain peptide--protein relations initial PSMs merge peptide-level scores peptide list: Now, can collapse relationships list protein identifications protein-level scores: check whether distribution protein-level scores decoy proteins follows uniform distribution. can see LPGF scores perform expected:  Finally, can obtain identified proteins applying protein-level FDR threshold:","code":"pep2prot <-    # Peptide-to-protein relations   iwf_pep2level(psms, levelRef = proteinRef) %>%    # Include peptide scores   inner_join(peptides, by = join_by(peptideRef))  pep2prot %>% glimpse() #> Rows: 29,725 #> Columns: 11 #> $ peptideRef <chr> \"Pep_AAAAAAAAAVSR\", \"Pep_AAAAAAAKNK\", \"Pep_AAAAAAALQAK\", \"P… #> $ proteinRef <chr> \"Q96JP5\", \"A8MW92\", \"P36578\", \"A6NIH7\", \"Q92859_REVERSED\", … #> $ shared     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,… #> $ pepScore   <dbl> 4.882813e-17, 8.691400e-08, 9.765627e-16, 9.065173e-19, 4.9… #> $ isDecoy    <lgl> FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE… #> $ decoys     <int> 0, 424, 0, 0, 7510, 5628, 0, 0, 0, 6948, 0, 7039, 7628, 0, … #> $ targets    <int> 4736, 12041, 5947, 3308, 19427, 17519, 3778, 5003, 2770, 18… #> $ pval       <dbl> 6.423433e-05, 5.453494e-02, 6.423433e-05, 6.423433e-05, 9.6… #> $ LP         <dbl> 4.192232823, 1.263325133, 4.192232823, 4.192232823, 0.01559… #> $ FDR        <dbl> 0.00000000, 0.03521302, 0.00000000, 0.00000000, 0.38657538,… #> $ qval       <dbl> 0.00000000, 0.03521302, 0.00000000, 0.00000000, 0.38653559,… proteins <-    pep2prot %>%    # Only consider unique (i.e. not shared) peptides   filter(shared==1) %>%    # Calculate protein-level scores   lpg(proteinRef) %>%    # Calculate target-decoy approach metrics using the LPGF score   target_decoy_approach(LPGF, lower_better = FALSE)  proteins %>% glimpse() #> Rows: 13,579 #> Columns: 19 #> $ proteinRef <chr> \"A0AVT1\", \"A1L0T0\", \"A2RRP1\", \"A5YKK6\", \"A6NHR9\", \"O00410\",… #> $ isDecoy    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ n          <int> 10, 7, 7, 6, 7, 11, 8, 8, 8, 8, 8, 9, 6, 10, 8, 10, 7, 8, 7… #> $ m          <dbl> 9, 6, 7, 6, 6, 11, 6, 6, 8, 7, 8, 8, 6, 6, 8, 10, 6, 7, 6, … #> $ LPM        <dbl> 4.192233, 4.192233, 4.192233, 4.192233, 4.192233, 4.192233,… #> $ LPS        <dbl> 36.99811, 24.35836, 29.34563, 25.15340, 25.29808, 46.11456,… #> $ LPF        <dbl> 36.05800, 24.30830, 29.34563, 25.15340, 25.15340, 46.11456,… #> $ LPGM       <dbl> 3.192358, 3.347218, 3.347218, 3.414151, 3.347218, 3.150980,… #> $ LPGS       <dbl> 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,… #> $ LPGF       <dbl> 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,… #> $ peptideRef <chr> \"Pep_CLANLRPLLDSGTM+16GTK\", \"Pep_AAM+16GLGAR\", \"Pep_CSGALTV… #> $ shared     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ pepScore   <dbl> 5.559802e-13, 7.812501e-12, 9.765627e-16, 3.906251e-16, 8.3… #> $ decoys     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ targets    <int> 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366,… #> $ pval       <dbl> 9.425071e-05, 9.425071e-05, 9.425071e-05, 9.425071e-05, 9.4… #> $ FDR        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ LP         <dbl> 4.025715, 4.025715, 4.025715, 4.025715, 4.025715, 4.025715,… #> $ qval       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… proteins %>%    plot_rank() proteins %>%    filter(qval <= 0.01) %>%    global_fdr() #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1   4248    42            0.989"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"gene-identifications","dir":"Articles","previous_headings":"","what":"Gene identifications","title":"b10prot","text":"Since used unique peptides previous section, protein isoforms gene share peptide sequences removed. minimize effect simplification, now consider peptides unique gene level. steps equivalent used protein identification workflow. First, need data.frame peptide--gene relations, including peptide-level scores previous section. , obtain peptide--gene relations initial PSMs merge peptide-level scores peptide list: Now, can collapse relationships list gene identifications gene-level scores: check whether distribution gene-level scores decoy genes follows uniform distribution. can see LPGF scores perform expected:  Finally, can obtain identified genes applying gene-level FDR threshold:","code":"pep2gene <-    # Peptide-to-gene relations   iwf_pep2level(psms, levelRef = geneRef) %>%    # Include peptide scores   inner_join(peptides, by = join_by(peptideRef))  pep2gene %>% glimpse() #> Rows: 29,703 #> Columns: 11 #> $ peptideRef <chr> \"Pep_AAAAAAAAAVSR\", \"Pep_AAAAAAAKNK\", \"Pep_AAAAAAALQAK\", \"P… #> $ geneRef    <chr> \"ZFP91\", \"PHF20L1\", \"RPL4\", \"UNC119B\", \"NEO1_REVERSED\", \"VA… #> $ shared     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1,… #> $ pepScore   <dbl> 4.882813e-17, 8.691400e-08, 9.765627e-16, 9.065173e-19, 4.9… #> $ isDecoy    <lgl> FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE… #> $ decoys     <int> 0, 424, 0, 0, 7510, 5628, 0, 0, 0, 6948, 0, 7039, 7628, 0, … #> $ targets    <int> 4736, 12041, 5947, 3308, 19427, 17519, 3778, 5003, 2770, 18… #> $ pval       <dbl> 6.423433e-05, 5.453494e-02, 6.423433e-05, 6.423433e-05, 9.6… #> $ LP         <dbl> 4.192232823, 1.263325133, 4.192232823, 4.192232823, 0.01559… #> $ FDR        <dbl> 0.00000000, 0.03521302, 0.00000000, 0.00000000, 0.38657538,… #> $ qval       <dbl> 0.00000000, 0.03521302, 0.00000000, 0.00000000, 0.38653559,… genes <-    pep2gene %>%    # Only consider unique (i.e. not shared) peptides   filter(shared==1) %>%    # Calculate gene-level scores   lpg(geneRef) %>%    # Calculate target-decoy approach metrics using the LPGF score   target_decoy_approach(LPGF, lower_better = FALSE)  genes %>% glimpse() #> Rows: 13,552 #> Columns: 19 #> $ geneRef    <chr> \"A2M\", \"AARS\", \"ABAT\", \"ACAA2\", \"ACAT1\", \"ACLY\", \"ACO1\", \"A… #> $ isDecoy    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ n          <int> 12, 9, 8, 10, 9, 10, 8, 11, 11, 6, 6, 8, 6, 10, 9, 69, 7, 7… #> $ m          <dbl> 12, 9, 6, 10, 9, 9, 7, 11, 10, 6, 6, 7, 6, 8, 9, 61, 7, 7, … #> $ LPM        <dbl> 4.192233, 4.192233, 4.192233, 4.192233, 4.192233, 4.192233,… #> $ LPS        <dbl> 50.30679, 37.73010, 24.49706, 41.92233, 36.88500, 38.09116,… #> $ LPF        <dbl> 50.30679, 37.73010, 23.92295, 41.92233, 36.88500, 37.73010,… #> $ LPGM       <dbl> 3.113205, 3.238102, 3.289240, 3.192358, 3.238102, 3.192358,… #> $ LPGS       <dbl> 300.00000, 300.00000, 15.95459, 300.00000, 300.00000, 300.0… #> $ LPGF       <dbl> 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,… #> $ peptideRef <chr> \"Pep_DLTGFPGPLNDQDNEDCLNR\", \"Pep_AVFDETYPDPVR\", \"Pep_CLEEVE… #> $ shared     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ pepScore   <dbl> 1.521663e-15, 1.464844e-16, 3.906251e-15, 2.723810e-29, 1.8… #> $ decoys     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ targets    <int> 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367,… #> $ pval       <dbl> 9.444654e-05, 9.444654e-05, 9.444654e-05, 9.444654e-05, 9.4… #> $ FDR        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ LP         <dbl> 4.024814, 4.024814, 4.024814, 4.024814, 4.024814, 4.024814,… #> $ qval       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… genes %>%    plot_rank() genes %>%    filter(qval <= 0.01) %>%    global_fdr() #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1   4249    42            0.988"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"protein-groups","dir":"Articles","previous_headings":"","what":"Protein groups","title":"b10prot","text":"Although working gene level reduces number shared peptide sequences, may still remove peptides whose sequences shared proteins different genes. avoid problem, can build groups proteins share peptide sequences report list protein groups passing protein group-level FDR threshold. build protein groups, use PAnalyzer algorithm. example included package:  PAnalyzer receives input data.frame peptide--protein relations returns another data.frame includes peptide--protein--group relations along corresponding peptide protein types: relations, can obtain list protein group identifications corresponding scores: manner equivalent protein gene identification workflow, can test score distribution decoy protein groups:  also report list groups passing protein group-level FDR threshold:","code":"data(example_panalyzer, package = \"b10prot\") plot_groups(example_panalyzer, groupRefs = 1:5) pep2prot2group <-    pep2prot %>%    iwf_grouping()  pep2prot2group %>%    summary() #> # A tibble: 4 × 5 #>   Type              TargetProteins DecoyProteins TargetGroups DecoyGroups #>   <chr>                      <int>         <int>        <int>       <int> #> 1 ambiguous                     26            NA            2          NA #> 2 conclusive                  8155          5300         8155        5300 #> 3 indistinguishable            528           320          203         126 #> 4 non-conclusive               335           142          335         142 groups <-    pep2prot2group %>%    # Instead of iwf_pep2level() we use iwf_pep2group() to retain the list of proteins within each group   iwf_pep2group() %>%    # Only consider peptides unique to one group (this also removes non-conclusice proteins)    filter(shared==1) %>%    # Calculate protein group-level scores   lpg(groupRef) %>%    # Calculate target-decoy approach metrics using the LPGF score   target_decoy_approach(LPGF, lower_better = FALSE)  groups %>% filter(m>1) %>% glimpse() #> Rows: 2,326 #> Columns: 27 #> $ groupRef      <dbl> 17, 28, 32, 68, 73, 81, 83, 145, 183, 243, 289, 299, 301… #> $ isDecoy       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … #> $ n             <int> 7, 10, 6, 8, 12, 7, 7, 6, 35, 9, 69, 50, 9, 11, 6, 8, 15… #> $ m             <dbl> 7, 10, 6, 7, 10, 7, 7, 6, 34, 6, 61, 45, 9, 8, 6, 7, 13,… #> $ LPM           <dbl> 4.192233, 4.192233, 4.192233, 4.192233, 4.192233, 4.1922… #> $ LPS           <dbl> 29.34563, 39.00168, 25.15340, 30.15675, 44.63238, 29.345… #> $ LPF           <dbl> 29.34563, 39.00168, 25.15340, 29.34563, 41.92233, 29.345… #> $ LPGM          <dbl> 3.347218, 3.192358, 3.414151, 3.289240, 3.113205, 3.3472… #> $ LPGS          <dbl> 300.00000, 300.00000, 300.00000, 300.00000, 300.00000, 3… #> $ LPGF          <dbl> 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 3… #> $ peptideRef    <chr> \"Pep_EVVSLQTSLEQK\", \"Pep_LDAESLVK\", \"Pep_EFSLDVGYER\", \"P… #> $ proteinRef    <chr> \"Q8NDV3\", \"P42858\", \"P61158\", \"P50453\", \"Q8IX01\", \"P2196… #> $ peptideType   <chr> \"unique\", \"unique\", \"unique\", \"non-significant\", \"unique… #> $ proteinType   <chr> \"conclusive\", \"conclusive\", \"conclusive\", \"conclusive\", … #> $ shared        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ pepScore      <dbl> 9.765627e-17, 1.562500e-11, 5.859376e-14, 3.425863e-07, … #> $ decoys        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ targets       <int> 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 3… #> $ pval          <dbl> 9.214891e-05, 9.214891e-05, 9.214891e-05, 9.214891e-05, … #> $ FDR           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ discPeptides  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,… #> $ totalPeptides <int> 8, 10, 6, 8, 12, 7, 7, 6, 35, 9, 69, 50, 9, 11, 6, 8, 15… #> $ proteinCount  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8,… #> $ proteinRefs   <chr> \"Q8NDV3\", \"P42858\", \"P61158\", \"P50453\", \"Q8IX01\", \"P2196… #> $ proteinMaster <chr> \"Q8NDV3\", \"P42858\", \"P61158\", \"P50453\", \"Q8IX01\", \"P2196… #> $ LP            <dbl> 4.03551, 4.03551, 4.03551, 4.03551, 4.03551, 4.03551, 4.… #> $ qval          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… groups %>%    plot_rank() groups %>%    filter(qval <= 0.01) %>%    global_fdr() #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1   4386    43            0.980"},{"path":"https://akrogp.github.io/b10prot/articles/b10prot.html","id":"refined-fdr","dir":"Articles","previous_headings":"","what":"Refined FDR","title":"b10prot","text":"identification workflows presented , used traditional FDR estimation. However, newer FDR estimation methods based higher-level (e.g., protein) target-decoy competitive approach can improve sensitivity. package allows compute FDRs long decoy target identifications share common name optional affix (prefix suffix). finally, use refined FDR threshold reported identifications:","code":"refined_genes <-    pep2gene %>%    # Only consider unique (i.e. not shared) peptides   filter(shared==1) %>%    # Calculate gene-level scores   lpg(geneRef) %>%    # Calculate refined FDRs using the LPGF score   refined_fdr(geneRef, LPGF, lower_better = FALSE, affix = \"_REVERSED\")  refined_genes %>%    select(geneRef, isDecoy, LPGF, FDRn, FDRp, FDRr, to, do, td, tb, db) %>%    glimpse() #> Rows: 13,552 #> Columns: 11 #> $ geneRef <chr> \"A2M\", \"AARS\", \"ABAT\", \"ACAA2\", \"ACAT1\", \"ACLY\", \"ACO1\", \"ACO2… #> $ isDecoy <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,… #> $ LPGF    <dbl> 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 30… #> $ FDRn    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ FDRp    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ FDRr    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ to      <int> 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 36… #> $ do      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ td      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ tb      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ db      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… refined_genes %>%      filter(FDRr <= 0.01) %>%      global_fdr() #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1   4282    66             1.54"},{"path":"https://akrogp.github.io/b10prot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gorka Prieto. Author, maintainer.","code":""},{"path":"https://akrogp.github.io/b10prot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Prieto G (2024). b10prot: Protein Identification Shotgun Proteomics Data. R package version 0.0.0.9000, https://akrogp.github.io/b10prot/.","code":"@Manual{,   title = {b10prot: Protein Identification for Shotgun Proteomics Data},   author = {Gorka Prieto},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://akrogp.github.io/b10prot/}, }"},{"path":"https://akrogp.github.io/b10prot/index.html","id":"b10prot-","dir":"","previous_headings":"","what":"Protein Identification for Shotgun Proteomics Data","title":"Protein Identification for Shotgun Proteomics Data","text":"b10prot R package designed analysis proteomics data, specifically focusing protein identification. developed part EhuB10 initiative, collaborative effort several research groups University Basque Country (UPV/EHU). name b10prot reference bioinformatics proteomics, “b10” representing “bio” way reflects biology binary code. package built aim simplifying integration latest research proteomics data analysis workflows. works data “tidy” format, following principles similar tidyverse.","code":""},{"path":"https://akrogp.github.io/b10prot/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Protein Identification for Shotgun Proteomics Data","text":"panalyzer runs PAnalyzer algorithm peptide--protein data. plot_groups plots PAnalyzer protein groups composition. lpg calculates different LP Gamma (LPG) scores, including recommended LPGF score. plot_rank plots decoy scores vs rank check uniform distribution. target_decoy_approach calculates p-values q-values based traditional target-decoy approach. refined_fdr computes different FDR estimations using competitive approach target decoy identifications.","code":""},{"path":"https://akrogp.github.io/b10prot/index.html","id":"identification-workflow","dir":"","previous_headings":"","what":"Identification Workflow","title":"Protein Identification for Shotgun Proteomics Data","text":"b10prot package includes set functions (iwf_ prefix) specifically designed streamline protein identification workflow. functions designed work data “tidy” format, organized way type observation stored column row represents single observation. workflow based two main types data: iwf_load_psms loads PSMs mzIdentML files. iwf_psm2pep aggregates PSMs peptides. lpg collapses relationships list identifications including LPG scores. iwf_pep2level maps peptides specified level. iwf_grouping performs protein grouping based peptide--protein relations. iwf_pep2group creates peptide--group relations protein grouping relations.","code":""},{"path":"https://akrogp.github.io/b10prot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Protein Identification for Shotgun Proteomics Data","text":"can install development version b10prot GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"akrogp/b10prot\")"},{"path":"https://akrogp.github.io/b10prot/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Protein Identification for Shotgun Proteomics Data","text":"can learn vignette(\"b10prot\").","code":""},{"path":"https://akrogp.github.io/b10prot/reference/colog.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Logarithmic Transformation for Probabilities — colog","title":"Compute Logarithmic Transformation for Probabilities — colog","text":"function computes custom logarithmic transformation probabilities. probability less LIMIT_PROB, returns LIMIT_COLOG. Otherwise, returns negative base-10 logarithm probability.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/colog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Logarithmic Transformation for Probabilities — colog","text":"","code":"colog(prob)"},{"path":"https://akrogp.github.io/b10prot/reference/colog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Logarithmic Transformation for Probabilities — colog","text":"prob numeric vector probabilities.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/colog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Logarithmic Transformation for Probabilities — colog","text":"numeric vector values less LIMIT_PROB replaced LIMIT_COLOG, values transformed using -log10().","code":""},{"path":"https://akrogp.github.io/b10prot/reference/colog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Logarithmic Transformation for Probabilities — colog","text":"","code":"# Example with a single probability value colog(0.001) #> [1] 3  # Example with a vector of probabilities colog(c(0.001, 0.05, 0.1)) #> [1] 3.00000 1.30103 1.00000"},{"path":"https://akrogp.github.io/b10prot/reference/example_panalyzer.html","id":null,"dir":"Reference","previous_headings":"","what":"PAnalyzer Example Data — example_panalyzer","title":"PAnalyzer Example Data — example_panalyzer","text":"dataset containing PAnalyzer example presented original paper.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/example_panalyzer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PAnalyzer Example Data — example_panalyzer","text":"","code":"example_panalyzer"},{"path":"https://akrogp.github.io/b10prot/reference/example_panalyzer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PAnalyzer Example Data — example_panalyzer","text":"data frame 18 rows following 5 columns: peptideRef Character vector peptide references. proteinRef Character vector protein references. peptideType Character vector indicating type peptide. proteinType Character vector indicating type protein. groupRef Integer vector protein group references.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/example_panalyzer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PAnalyzer Example Data — example_panalyzer","text":"Data extracted PAnalyzer: software tool protein inference shotgun proteomics demonstration purposes.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/example_panalyzer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PAnalyzer Example Data — example_panalyzer","text":"","code":"data(example_panalyzer, package = \"b10prot\") plot_groups(example_panalyzer, groupRefs = 1:5)"},{"path":"https://akrogp.github.io/b10prot/reference/global_fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Global False Discovery Rate (FDR) — global_fdr","title":"Compute Global False Discovery Rate (FDR) — global_fdr","text":"function calculates global False Discovery Rate (FDR) percentage based total number target decoy identifications data.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/global_fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Global False Discovery Rate (FDR) — global_fdr","text":"","code":"global_fdr(data)"},{"path":"https://akrogp.github.io/b10prot/reference/global_fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Global False Discovery Rate (FDR) — global_fdr","text":"data data frame containing identification data. must include logical column isDecoy indicating whether row corresponds decoy identification.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/global_fdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Global False Discovery Rate (FDR) — global_fdr","text":"data frame total counts target decoy identifications, global FDR expressed percentage.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/global_fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Global False Discovery Rate (FDR) — global_fdr","text":"","code":"# Example usage with a sample dataset sample_data <- data.frame(   isDecoy = c(TRUE, FALSE, FALSE, TRUE, FALSE) ) global_fdr(sample_data) #> # A tibble: 1 × 3 #>   Target Decoy `Global FDR (%)` #>    <int> <int>            <dbl> #> 1      3     2             66.7"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_grouping.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Protein Grouping Based on Peptide-to-Protein Relations — iwf_grouping","title":"Perform Protein Grouping Based on Peptide-to-Protein Relations — iwf_grouping","text":"function builds protein groups using peptides pass specified peptide-level FDR threshold. Peptides pass threshold grouped separately assigned negative group identifier. utilizes PAnalyzer algorithm infer protein groups assigns peptide protein types.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_grouping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Protein Grouping Based on Peptide-to-Protein Relations — iwf_grouping","text":"","code":"iwf_grouping(pep2prot, threshold = 0.01)"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_grouping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Protein Grouping Based on Peptide-to-Protein Relations — iwf_grouping","text":"pep2prot data frame containing peptide--protein relations, including columns peptideRef, proteinRef, qval, isDecoy. threshold numeric value specifying peptide-level FDR threshold grouping (default 0.01).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_grouping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Protein Grouping Based on Peptide-to-Protein Relations — iwf_grouping","text":"data frame inferred protein groups, additional columns: peptideType: Type peptide (\"unique\", \"discriminating\", \"non-discriminating\"). proteinType: Type protein (\"conclusive\", \"indistinguishable\", \"ambiguous\", \"non-conclusive\"). groupRef: Group identifier proteins. shared: number groups matched peptide.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/iwf_load_psms.html","id":null,"dir":"Reference","previous_headings":"","what":"Load PSMs from mzIdentML Files — iwf_load_psms","title":"Load PSMs from mzIdentML Files — iwf_load_psms","text":"function loads Peptide--Spectrum Matches (PSMs) mzIdentML files specified directory, combines , adds standard column PSM score protein reference.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_load_psms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load PSMs from mzIdentML Files — iwf_load_psms","text":"","code":"iwf_load_psms(path = \".\", pattern = \".mzid\", psm_score = NULL, verbose = FALSE)"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_load_psms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load PSMs from mzIdentML Files — iwf_load_psms","text":"path character string specifying directory mzIdentML files located. Default current working directory (\".\"). pattern character string representing file pattern search . Default \".mzid\", targets mzIdentML files. psm_score optional character string specifying column name used PSM score. NULL, last column loaded data used PSM score.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_load_psms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load PSMs from mzIdentML Files — iwf_load_psms","text":"data.frame containing combined PSM data, added columns PSM score (psmScore) protein reference (proteinRef).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2group.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Peptides to Protein Groups — iwf_pep2group","title":"Assign Peptides to Protein Groups — iwf_pep2group","text":"function processes peptide--protein group relationships summarizing number discriminating total peptides per protein, assigning peptides respective protein groups. Proteins within group ordered number discriminating peptides, followed total number peptides.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Peptides to Protein Groups — iwf_pep2group","text":"","code":"iwf_pep2group(pep2prot2group)"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Peptides to Protein Groups — iwf_pep2group","text":"pep2prot2group data frame containing peptide--protein--group relations, including peptideRef, proteinRef, groupRef, peptideType.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Peptides to Protein Groups — iwf_pep2group","text":"data frame peptides assigned protein groups, additional columns: proteinCount: number proteins group. proteinRefs: concatenation protein references group. proteinMaster: first protein group.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2level.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Peptides to a Specified Reference Level — iwf_pep2level","title":"Map Peptides to a Specified Reference Level — iwf_pep2level","text":"function maps peptides specified reference level (e.g., protein, gene, protein group) based Peptide--Spectrum Matches (PSMs). also calculates many reference entities (e.g., proteins, genes, groups) matched peptide.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Peptides to a Specified Reference Level — iwf_pep2level","text":"","code":"iwf_pep2level(psms, levelRef)"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Peptides to a Specified Reference Level — iwf_pep2level","text":"psms data.frame containing PSM data, including peptideRef (peptide identifier) reference level specified levelRef. levelRef column name psms contains reference level peptides mapped.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_pep2level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Peptides to a Specified Reference Level — iwf_pep2level","text":"data.frame containing: peptideRef peptide identifier. levelRef reference level identifier. shared number reference entities matched peptide.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_psm2pep.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate PSMs into Peptides — iwf_psm2pep","title":"Aggregate PSMs into Peptides — iwf_psm2pep","text":"function aggregates Peptide--Spectrum Matches (PSMs) peptides, selecting best PSM score peptide maintaining decoy information. Peptides present target decoy subsets removed final results.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_psm2pep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate PSMs into Peptides — iwf_psm2pep","text":"","code":"iwf_psm2pep(psms, lower_better = TRUE)"},{"path":"https://akrogp.github.io/b10prot/reference/iwf_psm2pep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate PSMs into Peptides — iwf_psm2pep","text":"psms data.frame containing PSM data, must include columns peptideRef, psmScore, isDecoy. lower_better logical value indicating whether lower PSM score better. Default TRUE.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/iwf_psm2pep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate PSMs into Peptides — iwf_psm2pep","text":"data.frame containing one row per unique peptide columns: peptideRef peptide identifier. pepScore best score peptide. isDecoy logical indicating whether peptide belongs decoy set.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/lpg.html","id":null,"dir":"Reference","previous_headings":"","what":"LP Gamma (LPG) Metrics Calculation — lpg","title":"LP Gamma (LPG) Metrics Calculation — lpg","text":"function calculates various LP Gamma (LPG) metrics specified reference level, protein, gene protein group. metrics derived coLogarithm Probability (LP) constituting peptides include probabilities derived maximum LP, sum LP values, filtered LP sums using specified peptide-level FDR threshold.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/lpg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LP Gamma (LPG) Metrics Calculation — lpg","text":"","code":"lpg(data, levelRef, threshold = 0.01)"},{"path":"https://akrogp.github.io/b10prot/reference/lpg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LP Gamma (LPG) Metrics Calculation — lpg","text":"data data frame containing identification data, including peptide-related columns coLogarithm Probability (LP), q-values (qval), logical column isDecoy. levelRef column name reference level group , protein gene identifier. unquoted column name. threshold numeric value representing FDR threshold peptide-level q-values (default 0.01).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/lpg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LP Gamma (LPG) Metrics Calculation — lpg","text":"data frame containing calculated LPG metrics: isDecoy Indicates whether group contains decoy identification. n total number peptide identifications group. m number peptide identifications q-value threshold. LPM maximum coLogarithm Probability (LP) group. LPS sum coLogarithm Probability (LP) group. LPF sum coLogarithm Probability identifications q-value threshold. LPGM LP Gamma value based maximum LP. LPGS LP Gamma value based sum LP values. LPGF LP Gamma value based filtered sum LP values confident identifications.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/lpg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LP Gamma (LPG) Metrics Calculation — lpg","text":"","code":"# Example usage with a sample dataset sample_data <- data.frame(   levelRef = c(\"P1\", \"P1\", \"P2\", \"P2\", \"P3\"),   LP = c(1.5, 2.0, 0.5, 1.0, 1.2),   qval = c(0.01, 0.02, 0.005, 0.03, 0.01),   isDecoy = c(FALSE, FALSE, TRUE, FALSE, FALSE) ) lpg(sample_data, levelRef, threshold = 0.01) #> # A tibble: 3 × 10 #>   levelRef isDecoy     n     m   LPM   LPS   LPF  LPGM  LPGS  LPGF #>   <chr>    <lgl>   <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 P1       FALSE       2     1   2     3.5   1.5 1.70  2.54  1.20  #> 2 P2       TRUE        2     1   1     1.5   0.5 0.721 0.851 0.199 #> 3 P3       FALSE       1     1   1.2   1.2   1.2 1.2   1.2   1.2"},{"path":"https://akrogp.github.io/b10prot/reference/panalyzer.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PAnalyzer on Peptide-to-Protein Data — panalyzer","title":"Run PAnalyzer on Peptide-to-Protein Data — panalyzer","text":"Executes PAnalyzer tool provided peptide--protein dataset. function writes input data temporary file, runs PAnalyzer tool using Java, reads output R.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/panalyzer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PAnalyzer on Peptide-to-Protein Data — panalyzer","text":"","code":"panalyzer(pep2prot)"},{"path":"https://akrogp.github.io/b10prot/reference/panalyzer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PAnalyzer on Peptide-to-Protein Data — panalyzer","text":"pep2prot data frame containing peptide--protein mappings. data frame must include columns peptideRef proteinRef.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/panalyzer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PAnalyzer on Peptide-to-Protein Data — panalyzer","text":"data frame original data additional columns: peptideType: Type peptide determined PAnalyzer. Possible values include \"unique\", \"discriminating\", \"non-discriminating\". proteinType: Type protein determined PAnalyzer. Possible values include \"conclusive\", \"indistinguishable\", \"ambiguous\", \"non-conclusive\". proteins group proteinType value. groupRef: Group reference PAnalyzer.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/plot_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Protein Groups Composition — plot_groups","title":"Plot Protein Groups Composition — plot_groups","text":"Visualizes composition selected protein groups based associated peptides. function filters specified protein groups, arranges , displays plot showing peptides associated protein group. Peptides colored according classification unique, discriminating, non-discriminating, non-significant.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/plot_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Protein Groups Composition — plot_groups","text":"","code":"plot_groups(panalyzer, groupRefs)"},{"path":"https://akrogp.github.io/b10prot/reference/plot_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Protein Groups Composition — plot_groups","text":"panalyzer data frame containing results panalyzer function. data frame must include columns groupRef, peptideRef, peptideType, proteinRef proteinType. groupRefs vector group reference identifiers (groupRef) representing protein groups visualized.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/plot_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Protein Groups Composition — plot_groups","text":"ggplot object visualizing selected protein groups associated peptides.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/plot_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Protein Groups Composition — plot_groups","text":"","code":"data(example_panalyzer, package = \"b10prot\") plot_groups(example_panalyzer, groupRefs = 1:5)"},{"path":"https://akrogp.github.io/b10prot/reference/plot_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Rank of Decoy Scores — plot_rank","title":"Plot Rank of Decoy Scores — plot_rank","text":"function creates rank plot decoy scores based various LP (coLogarithm Probability) metrics, including LPM, LPS, LPF, LPG scores (LPGM, LPGS, LPGF). plot displays ranked scores decoys reference line comparison.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/plot_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Rank of Decoy Scores — plot_rank","text":"","code":"plot_rank(data)"},{"path":"https://akrogp.github.io/b10prot/reference/plot_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Rank of Decoy Scores — plot_rank","text":"data data frame containing identification data, including columns decoy status (isDecoy) different LP metrics (LPM, LPS, LPF, LPGM, LPGS, LPGF).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/plot_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Rank of Decoy Scores — plot_rank","text":"ggplot object showing rank plot decoy scores different metrics. score type displayed separate facet rank plotted x-axis score y-axis. red diagonal line represents reference ideal ranking.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/refined_fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","title":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","text":"function computes refined False Discovery Rate (FDR) estimates using competitive approach target decoy identifications. provides three types FDR calculations: FDRn, FDRp, FDRr, adjust different competitive scenarios targets decoys.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/refined_fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","text":"","code":"refined_fdr(data, levelRef, score, lower_better = TRUE, affix = \"_REVERSED\")"},{"path":"https://akrogp.github.io/b10prot/reference/refined_fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","text":"data data frame containing identification data, including columns reference level, score, whether identification decoy (isDecoy). levelRef column name containing reference level identification (e.g., protein gene reference). unquoted column name. score column name score used rank identifications. unquoted column name. lower_better logical value indicating whether lower scores better (default TRUE). affix string indicating suffix prefix used identify decoy entries reference level column. Default \"_REVERSED\".","code":""},{"path":"https://akrogp.github.io/b10prot/reference/refined_fdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","text":"data frame original data additional columns refined FDR estimates: FDRn Normal FDR estimation cumulative minimum (q-value). FDRp Picked FDR estimation cumulative minimum (q-value). FDRr Refined FDR estimationas cumulative minimum (q-value). Target-identifications count. Decoy-identifications count. td Count identifications target decoy scores. tb Target-best identifications count. db Decoy-best identifications count.","code":""},{"path":[]},{"path":"https://akrogp.github.io/b10prot/reference/refined_fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refined False Discovery Rate (FDR) Calculation — refined_fdr","text":"","code":"# Example usage with a sample dataset sample_data <- data.frame(   proteinRef = c(\"P1\", \"P1_REVERSED\", \"P2\", \"P3\", \"P3_REVERSED\"),   score = c(0.1, 0.2, 0.3, 0.5, 0.4),   isDecoy = c(FALSE, TRUE, FALSE, FALSE, TRUE) ) refined_fdr(sample_data, levelRef = proteinRef, score = score, lower_better = TRUE) #> # A tibble: 5 × 11 #>   proteinRef  score isDecoy    to    do    td    tb    db  FDRn  FDRp  FDRr #>   <chr>       <dbl> <lgl>   <int> <int> <int> <int> <int> <dbl> <dbl> <dbl> #> 1 P1            0.1 FALSE       1     0     0     0     0 0       0   0     #> 2 P1_REVERSED   0.2 TRUE        0     0     0     1     0 0.5     0   0     #> 3 P2            0.3 FALSE       1     0     0     1     0 0.5     0   0     #> 4 P3_REVERSED   0.4 TRUE        1     1     0     1     0 0.667   0.5 0.5   #> 5 P3            0.5 FALSE       1     0     0     1     1 0.667   0.5 0.667"},{"path":"https://akrogp.github.io/b10prot/reference/summary.panalyzer.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize PAnalyzer Results — summary.panalyzer","title":"Summarize PAnalyzer Results — summary.panalyzer","text":"Provides summary PAnalyzer results grouping data based whether protein target decoy, protein type. summary includes number distinct proteins protein groups target decoy entries.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/summary.panalyzer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize PAnalyzer Results — summary.panalyzer","text":"","code":"# S3 method for panalyzer summary(panalyzer)"},{"path":"https://akrogp.github.io/b10prot/reference/summary.panalyzer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize PAnalyzer Results — summary.panalyzer","text":"panalyzer data frame containing results panalyzer function. data frame must contain following columns: isDecoy: Logical indicator whether protein decoy (TRUE) target (FALSE). proteinType: type protein classified PAnalyzer (e.g., \"conclusive\", \"indistinguishable\", \"ambiguous\", \"non-conclusive\"). proteinRef: Protein reference identifier. groupRef: Protein group reference.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/summary.panalyzer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize PAnalyzer Results — summary.panalyzer","text":"data frame summarizing PAnalyzer results following columns: Type: type protein (\"conclusive\", \"indistinguishable\", \"ambiguous\", \"non-conclusive\"). TargetProteins: number target proteins given type. DecoyProteins: number decoy proteins given type. TargetGroups: number target protein groups given type. DecoyGroups: number decoy protein groups given type.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/target_decoy_approach.html","id":null,"dir":"Reference","previous_headings":"","what":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","title":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","text":"function applies Target-Decoy Approach (TDA) estimate False Discovery Rate (FDR) based scoring metric potential identifications. calculates p-value, local confidence score (LP), q-value (FDR) identification.","code":""},{"path":"https://akrogp.github.io/b10prot/reference/target_decoy_approach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","text":"","code":"target_decoy_approach(data, score, lower_better = TRUE)"},{"path":"https://akrogp.github.io/b10prot/reference/target_decoy_approach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","text":"data data frame containing identification data. must include logical column isDecoy indicating whether row corresponds decoy identification. score column name score used rank identifications. unquoted column name. lower_better logical value indicating whether lower scores better (default TRUE).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/target_decoy_approach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","text":"data frame original data additional columns: decoys cumulative number decoys identification. targets cumulative number targets identification. pval p-value estimated using target-decoy approach. LP local confidence score, computed using colog() function. FDR false discovery rate (FDR) score threshold. qval cumulative minimum FDR (q-value).","code":""},{"path":"https://akrogp.github.io/b10prot/reference/target_decoy_approach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target-Decoy Approach for FDR Estimation — target_decoy_approach","text":"","code":"# Example usage with a sample dataset sample_data <- data.frame(   score = c(0.01, 0.02, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07),   isDecoy = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE) ) target_decoy_approach(sample_data, score, lower_better = TRUE) #> # A tibble: 8 × 8 #>   score isDecoy decoys targets  pval    LP   FDR  qval #>   <dbl> <lgl>    <int>   <int> <dbl> <dbl> <dbl> <dbl> #> 1  0.01 FALSE        0       1  0.25 0.602 0     0     #> 2  0.02 FALSE        0       2  0.25 0.602 0     0     #> 3  0.03 FALSE        0       3  0.25 0.602 0     0     #> 4  0.04 TRUE         1       4  0.25 0.602 0.25  0.167 #> 5  0.04 FALSE        1       4  0.75 0.125 0.25  0.167 #> 6  0.05 FALSE        1       5  0.75 0.125 0.2   0.167 #> 7  0.06 FALSE        1       6  0.75 0.125 0.167 0.167 #> 8  0.07 TRUE         2       6  0.75 0.125 0.333 0.333"},{"path":"https://akrogp.github.io/b10prot/news/index.html","id":"b10prot-development-version","dir":"Changelog","previous_headings":"","what":"b10prot (development version)","title":"b10prot (development version)","text":"Initial CRAN submission.","code":""}]
